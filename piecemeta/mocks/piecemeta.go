// Code generated by MockGen. DO NOT EDIT.
// Source: piecemeta.go

// Package mock_piecemeta is a generated GoMock package.
package mock_piecemeta

import (
	reflect "reflect"

	piecemeta "github.com/filecoin-project/boost/piecemeta"
	model "github.com/filecoin-project/boostd-data/model"
	abi "github.com/filecoin-project/go-state-types/abi"
	gomock "github.com/golang/mock/gomock"
	cid "github.com/ipfs/go-cid"
	index "github.com/ipld/go-car/v2/index"
	multihash "github.com/multiformats/go-multihash"
)

// MockSectionReader is a mock of SectionReader interface.
type MockSectionReader struct {
	ctrl     *gomock.Controller
	recorder *MockSectionReaderMockRecorder
}

// MockSectionReaderMockRecorder is the mock recorder for MockSectionReader.
type MockSectionReaderMockRecorder struct {
	mock *MockSectionReader
}

// NewMockSectionReader creates a new mock instance.
func NewMockSectionReader(ctrl *gomock.Controller) *MockSectionReader {
	mock := &MockSectionReader{ctrl: ctrl}
	mock.recorder = &MockSectionReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSectionReader) EXPECT() *MockSectionReaderMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockSectionReader) Read(p []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSectionReaderMockRecorder) Read(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSectionReader)(nil).Read), p)
}

// ReadAt mocks base method.
func (m *MockSectionReader) ReadAt(p []byte, off int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAt", p, off)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAt indicates an expected call of ReadAt.
func (mr *MockSectionReaderMockRecorder) ReadAt(p, off interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAt", reflect.TypeOf((*MockSectionReader)(nil).ReadAt), p, off)
}

// Seek mocks base method.
func (m *MockSectionReader) Seek(offset int64, whence int) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek.
func (mr *MockSectionReaderMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockSectionReader)(nil).Seek), offset, whence)
}

// MockSealer is a mock of Sealer interface.
type MockSealer struct {
	ctrl     *gomock.Controller
	recorder *MockSealerMockRecorder
}

// MockSealerMockRecorder is the mock recorder for MockSealer.
type MockSealerMockRecorder struct {
	mock *MockSealer
}

// NewMockSealer creates a new mock instance.
func NewMockSealer(ctrl *gomock.Controller) *MockSealer {
	mock := &MockSealer{ctrl: ctrl}
	mock.recorder = &MockSealerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSealer) EXPECT() *MockSealerMockRecorder {
	return m.recorder
}

// GetReader mocks base method.
func (m *MockSealer) GetReader(id abi.SectorNumber, offset, length abi.PaddedPieceSize) (piecemeta.SectionReader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReader", id, offset, length)
	ret0, _ := ret[0].(piecemeta.SectionReader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReader indicates an expected call of GetReader.
func (mr *MockSealerMockRecorder) GetReader(id, offset, length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReader", reflect.TypeOf((*MockSealer)(nil).GetReader), id, offset, length)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddDealForPiece mocks base method.
func (m *MockStore) AddDealForPiece(pieceCid cid.Cid, dealInfo model.DealInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDealForPiece", pieceCid, dealInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDealForPiece indicates an expected call of AddDealForPiece.
func (mr *MockStoreMockRecorder) AddDealForPiece(pieceCid, dealInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDealForPiece", reflect.TypeOf((*MockStore)(nil).AddDealForPiece), pieceCid, dealInfo)
}

// AddIndex mocks base method.
func (m *MockStore) AddIndex(pieceCid cid.Cid, records []model.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddIndex", pieceCid, records)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddIndex indicates an expected call of AddIndex.
func (mr *MockStoreMockRecorder) AddIndex(pieceCid, records interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIndex", reflect.TypeOf((*MockStore)(nil).AddIndex), pieceCid, records)
}

// GetIndex mocks base method.
func (m *MockStore) GetIndex(pieceCid cid.Cid) (index.Index, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex", pieceCid)
	ret0, _ := ret[0].(index.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockStoreMockRecorder) GetIndex(pieceCid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockStore)(nil).GetIndex), pieceCid)
}

// GetOffset mocks base method.
func (m *MockStore) GetOffset(pieceCid cid.Cid, hash multihash.Multihash) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffset", pieceCid, hash)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffset indicates an expected call of GetOffset.
func (mr *MockStoreMockRecorder) GetOffset(pieceCid, hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffset", reflect.TypeOf((*MockStore)(nil).GetOffset), pieceCid, hash)
}

// GetPieceDeals mocks base method.
func (m *MockStore) GetPieceDeals(pieceCid cid.Cid) ([]model.DealInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPieceDeals", pieceCid)
	ret0, _ := ret[0].([]model.DealInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPieceDeals indicates an expected call of GetPieceDeals.
func (mr *MockStoreMockRecorder) GetPieceDeals(pieceCid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPieceDeals", reflect.TypeOf((*MockStore)(nil).GetPieceDeals), pieceCid)
}

// IsIndexed mocks base method.
func (m *MockStore) IsIndexed(pieceCid cid.Cid) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsIndexed", pieceCid)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsIndexed indicates an expected call of IsIndexed.
func (mr *MockStoreMockRecorder) IsIndexed(pieceCid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsIndexed", reflect.TypeOf((*MockStore)(nil).IsIndexed), pieceCid)
}

// PiecesContaining mocks base method.
func (m_2 *MockStore) PiecesContaining(m multihash.Multihash) ([]cid.Cid, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "PiecesContaining", m)
	ret0, _ := ret[0].([]cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PiecesContaining indicates an expected call of PiecesContaining.
func (mr *MockStoreMockRecorder) PiecesContaining(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PiecesContaining", reflect.TypeOf((*MockStore)(nil).PiecesContaining), m)
}
